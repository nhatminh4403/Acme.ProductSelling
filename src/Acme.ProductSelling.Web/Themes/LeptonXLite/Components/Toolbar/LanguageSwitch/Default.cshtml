@using System.Linq
@using Microsoft.AspNetCore.Http.Extensions
@using Volo.Abp.AspNetCore.Mvc.UI.Theme.LeptonXLite.Languages
@using Acme.ProductSelling.Localization
@using Microsoft.Extensions.Localization
@using Microsoft.AspNetCore.Authorization
@using Volo.Abp.Users
@using Acme.ProductSelling.Permissions
@using System.Net;
@inject ICurrentUser CurrentUser
@inject IStringLocalizer<ProductSellingResource> L
@inject Microsoft.Extensions.Options.IOptions<Microsoft.AspNetCore.Builder.RequestLocalizationOptions> RequestLocalizationOptions
@inject IAuthorizationService AuthorizationService

@model ThemeLanguageInfo

@{
    var hasAdminPermission = await AuthorizationService.IsGrantedAsync(ProductSellingPermissions.Products.Default);
    var adminPaths = new[] { "/identity", "/account", "/tenantmanagement", "/setting-management", "/admin" };
    var currentPath = Context.Request.Path.Value.ToLowerInvariant();
    var isAdminPage = adminPaths.Any(p => currentPath.StartsWith(p)) || hasAdminPermission;



    string encodedReturnUrl;
    if (isAdminPage)
    {
        // Nếu là trang admin hoặc có quyền admin, không cần mã hóa returnUrl
        encodedReturnUrl = Context.Request.GetEncodedPathAndQuery();
    }
    else
    {
        var path = Context.Request.Path.Value;
        var pathSegments = path.Split('/', StringSplitOptions.RemoveEmptyEntries);
        var supportedCultures = RequestLocalizationOptions.Value.SupportedUICultures?.Select(c => c.Name).ToList() ?? new List<string>();

        var rawReturnUrl = path;

        if (pathSegments.Length > 0 && supportedCultures.Contains(pathSegments[0], StringComparer.OrdinalIgnoreCase))
        {

            var pathWithoutCulture = "/" + string.Join("/", pathSegments.Skip(1));

            // Ghép path đã xử lý với query string ban đầu
            rawReturnUrl = pathWithoutCulture + Context.Request.QueryString;
        }
        else
        {
            // Nếu path không chứa culture, dùng path nguyên bản
            rawReturnUrl = Context.Request.GetEncodedPathAndQuery();
        }
        // Mã hóa URL để sử dụng trong tham số returnUrl
        encodedReturnUrl = WebUtility.UrlEncode(rawReturnUrl);
    }

}

@if (Model.Languages.Any())
{
    <!-- Dropdown đơn giản khi Layout == null -->
    <div class="dropdown">
        <button class="btn btn-sm btn-outline-secondary dropdown-toggle" type="button" id="languageDropdown" data-bs-toggle="dropdown">
            <i class="bi bi-globe"></i> @Model.CurrentLanguage.DisplayName
        </button>
        <ul class="dropdown-menu">
            @foreach (var language in Model.Languages)
            {
                <li>
                    @if (isAdminPage || hasAdminPermission)
                    {
                        <a class="dropdown-item" href="~/Abp/Languages/Switch?culture=@(language.CultureName)&uiCulture=@(language.UiCultureName)&returnUrl=@(System.Net.WebUtility.UrlEncode(Context.Request.GetEncodedPathAndQuery()))">
                            @language.DisplayName
                        </a>
                    }
                    else
                    {
                        <a class="dropdown-item" href="/Abp/Languages/Switch?culture=@(language.CultureName)&uiCulture=@(language.UiCultureName)&returnUrl=@encodedReturnUrl">
                            @language.DisplayName
                        </a>
                    }

                </li>
            }
        </ul>
    </div>
}


