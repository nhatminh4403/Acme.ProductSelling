@page "/products/{Slug}"
@model Acme.ProductSelling.Web.Pages.Products.ProductDetailModel
@using Acme.ProductSelling.Localization
@using Microsoft.Extensions.Localization
@using Acme.ProductSelling.Categories
@inject IStringLocalizer<ProductSellingResource> L
@{
    ViewData["Title"] = Model.Product?.ProductName ?? L["ProductDetail"];
    Layout = "/Views/Shared/_Layout.cshtml";
}
@section scripts {
    <script>
        function toggleContent(id, button) {
            const container = document.getElementById(id);
            container.classList.toggle('expanded');
            button.classList.toggle('rotated');

            const showMoreText = button.querySelector('.show-more-text');
            const showLessText = button.querySelector('.show-less-text');

            if (showMoreText && showLessText) {
              showMoreText.classList.toggle('d-none');
              showLessText.classList.toggle('d-none');
            }
        }
        document.addEventListener('DOMContentLoaded', function () {
            const leftCard = document.getElementById('leftCard');
            const rightSidebar = document.getElementById('rightSidebar');

            if (leftCard && rightSidebar) {
                const height = leftCard.offsetHeight;
                rightSidebar.style.height = height + 'px';
            }
        });
    </script>
}
@if (Model.Product != null)
{
    <div class="container mt-4 mb-4">
        <div class="row">
            <div class="col-md-6">
                @if (!string.IsNullOrWhiteSpace(Model.Product.ImageUrl))
                {
                    <img src="@Model.Product.ImageUrl" class="img-fluid rounded border" alt="@Model.Product.ProductName">
                }
                else
                {
                    <div class="text-center p-5 border rounded bg-light"> <i class="fas fa-image fa-5x text-secondary"></i> </div>
                }
            </div>
            <div class="col-md-6">
                <h2>@Model.Product.ProductName</h2>
                <p class="text-muted">@L["Manufacturer"]: @Model.Product.ManufacturerName</p>
                <p>@Model.Product.Description</p>
                <h3 class="text-danger my-3">
                    @Model.Product.OriginalPrice.ToString("C0", System.Globalization.CultureInfo.GetCultureInfo("vi-VN"))
                </h3>
                @if (Model.Product.StockCount > 0)
                {
                    <p>@L["StockCount"]: @Model.Product.StockCount</p>
                    <button class="btn btn-primary btn-lg add-to-cart-button"
                            data-product-id="@Model.Product.Id"
                            data-product-name="@Model.Product.ProductName"
                            data-product-price="@Model.Product.OriginalPrice"
                    @(Model.Product.StockCount <= 0 ? "disabled" : "")>
                        <i class="fas fa-cart-plus me-2"></i>
                        @L[Model.Product.StockCount > 0 ? "AddToCart" : "OutOfStock"]
                    </button>
                }
                else
                {
                    <button class="btn btn-primary btn-lg add-to-cart-button"
                            data-product-id="@Model.Product.Id"
                            data-product-name="@Model.Product.ProductName"
                            data-product-price="@Model.Product.OriginalPrice"
                    @(Model.Product.StockCount <= 0 ? "disabled" : "")>
                        <i class="fas fa-cart-plus me-2"></i>
                        @L[Model.Product.StockCount > 0 ? "AddToCart" : "OutOfStock"]
                    </button>
                }


            </div>
        </div>

        <hr class="my-4" />

        @* --- Phần Hiển thị Specifications --- *@
        <div class="row">
            <div class="col-12">
                <h4>@L["Specifications"]</h4>

                @switch (Model.Product.CategorySpecificationType)
                {
                    case SpecificationType.Monitor:
                        @if (Model.Product.MonitorSpecification != null)
                        {
                            <partial name="/Pages/Shared/ProductSpecs/_MonitorSpecsPartial.cshtml" model="Model.Product.MonitorSpecification" />
                        }
                        break;
                    case SpecificationType.Mouse:
                        @if (Model.Product.MouseSpecification != null)
                        {
                            <partial name="/Pages/Shared/ProductSpecs/_MouseSpecsPartial.cshtml" model="Model.Product.MouseSpecification" />
                        }
                        break;
                    case SpecificationType.CPU:
                        @if (Model.Product.CpuSpecification != null)
                        {

                            <partial name="/Pages/Shared/ProductSpecs/_CpuSpecsPartial.cshtml" model="Model.Product.CpuSpecification" />
                        }
                        else
                        {
                            <p> @Model.Product.CpuSpecification</p>
                        }
                        break;
                    case SpecificationType.GPU:
                        @if (Model.Product.GpuSpecification != null)
                        {
                            <partial name="/Pages/Shared/ProductSpecs/_GpuSpecsPartial.cshtml" model="Model.Product.GpuSpecification" />
                        }
                        break;
                    case SpecificationType.RAM:
                        @if (Model.Product.RamSpecification != null)
                        {
                            <partial name="/Pages/Shared/ProductSpecs/_RamSpecsPartial.cshtml" model="Model.Product.RamSpecification" />
                        }
                        break;
                    case SpecificationType.Motherboard:
                        @if (Model.Product.MotherboardSpecification != null)
                        {
                            <partial name="/Pages/Shared/ProductSpecs/_MotherboardSpecsPartial.cshtml" model="Model.Product.MotherboardSpecification" />
                        }
                        break;
                    case SpecificationType.Storage:
                        @if (Model.Product.StorageSpecification != null)
                        {
                            <partial name="/Pages/Shared/ProductSpecs/_StorageSpecsPartial.cshtml" model="Model.Product.StorageSpecification" />
                        }
                        break;
                    case SpecificationType.PSU:
                        @if (Model.Product.PsuSpecification != null)
                        {
                            <partial name="/Pages/Shared/ProductSpecs/_PsuSpecsPartial.cshtml" model="Model.Product.PsuSpecification" />
                        }
                        break;
                    case SpecificationType.Case:
                        @if (Model.Product.CaseSpecification != null)
                        {
                            <partial name="/Pages/Shared/ProductSpecs/_CaseSpecsPartial.cshtml" model="Model.Product.CaseSpecification" />
                        }
                        break;
                    case SpecificationType.CPUCooler:
                        @if (Model.Product.CpuCoolerSpecification != null)
                        {
                            <partial name="/Pages/Shared/ProductSpecs/_CpuCoolerSpecsPartial.cshtml" model="Model.Product.CpuCoolerSpecification" />
                        }
                        break;
                    case SpecificationType.Keyboard:
                        @if (Model.Product.KeyboardSpecification != null)
                        {
                            <partial name="/Pages/Shared/ProductSpecs/_KeyboardSpecsPartial.cshtml" model="Model.Product.KeyboardSpecification" />
                        }
                        break;
                    case SpecificationType.Headset:
                        @if (Model.Product.HeadsetSpecification != null)
                        {
                            <partial name="/Pages/Shared/ProductSpecs/_HeadsetSpecsPartial.cshtml" model="Model.Product.HeadsetSpecification" />
                        }
                        break;
                    case SpecificationType.Laptop:
                        @if (Model.Product.LaptopSpecification != null)
                        {
                            <partial name="/Pages/Shared/ProductSpecs/_LaptopSpecsPartial.cshtml" model="Model.Product.LaptopSpecification" />
                        }
                        break;
                    default:
                        <p>@L["NoSpecificSpecifications"]</p>

                        <p>@Model.Product.CategorySpecificationType</p>
                        break;
                }
            </div>
        </div>
        <div class="row">
            <!-- Main content -->
            <div class="col-lg-8">
                <div class="card shadow-sm" id="leftCard">
                    <div class="card-header bg-light">Example 2: With Border and Shadow</div>
                    <div class="card-body">
                        <div class="content-container" id="content2">
                            <h5>What are collapsible containers?</h5>
                            <p>Collapsible containers are UI elements that allow you to show a preview of content while giving users the option to expand and see more.</p>
                            <ul>
                                <li>Long articles or blog posts</li>
                                <li>Product descriptions</li>
                                <li>FAQ sections</li>
                                <li>Comment sections</li>
                            </ul>
                            <h5>How do they work?</h5>
                            <p>They use CSS transitions to smoothly animate the expansion and collapse of the content.</p>
                            <h5>Benefits</h5>
                            <p>These containers help manage vertical space on your page and improve load performance.</p>
                        </div>
                        <hr />
                        <button class="btn btn-sm btn-outline-primary toggle-button d-block mx-auto" onclick="toggleContent('content2', this)">
                            <span class="show-more-text">Expand</span>
                            <span class="show-less-text d-none">Collapse</span>
                            <i class="bi bi-chevron-down ms-1"></i>
                        </button>
                    </div>
                </div>
            </div>

            <!-- Sidebar -->
            <div class="col-lg-4">
                <div class="sticky-sidebar" id="rightSidebar">
                    <h5>Sticky Sidebar</h5>
                    <p>This sidebar stays visible while scrolling the expanded content on the left.</p>
                </div>
            </div>
        </div>
    </div>
}
else
{
    <div class="alert alert-warning">@L["ProductNotFound"]</div>
}

