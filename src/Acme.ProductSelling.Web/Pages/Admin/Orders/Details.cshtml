@page "/admin/orders/details/{OrderNumber}"
@using Acme.ProductSelling.Orders.Dtos

@model Acme.ProductSelling.Web.Pages.Admin.Orders.DetailsModel

@{
    ViewData["Title"] = L["Order:OrderDetail"];
    Layout = "/Pages/Admin/Shared/_AdminLayout.cshtml";
}

@section styles {
    <link href="~/css/admin/orders/detail.css" rel="stylesheet" />
    <link href="~/css/shared/order-timeline.css" rel="stylesheet" />

}
@section scripts {
    <script src="~/js/admin/orders/detail.js">
    </script>
    <abp-script-bundle name="Shared.Order.SignalR" />

}
<!-- Page Header with Actions -->
<abp-card>
    <abp-card-header>
        <abp-row>
            <abp-column size-md="_8">
                <h3 class="mb-0">
                    <i class="bi bi-receipt me-2"></i>
                    @L["Order:OrderDetail"]: @Model.Order.OrderNumber
                </h3>
            </abp-column>
            <abp-column size-md="_4" class="text-end">
                <a asp-page="/Admin/Orders/Index" class="btn btn-secondary">
                    <i class="bi bi-arrow-left me-1"></i>
                    @L["BackToList"]
                </a>
                @if (Model.Order.OrderStatusText == "Confirmed" || Model.Order.OrderStatusText == "Processing")
                {
                    <button type="button" class="btn btn-success" id="btnShipOrder">
                        <i class="bi bi-truck me-1"></i>
                        @L["ShipOrder"]
                    </button>
                }
                @if (Model.Order.OrderStatusText == "Shipped")
                {
                    <button type="button" class="btn btn-primary" id="btnDeliverOrder">
                        <i class="bi bi-check-circle me-1"></i>
                        @L["DeliverOrder"]
                    </button>
                }
            </abp-column>
        </abp-row>
    </abp-card-header>
</abp-card>

<!-- Order Information Section - Using Normal HTML -->
<div class="order-detail-section mt-3">
    <div class="section-title">
        <i class="bi bi-info-circle me-2"></i>
        @L["Order:BasicInformation"]
    </div>

    <div class="info-row">
        <div class="info-label">@L["Order:OrderNumber"]:</div>
        <div class="info-value">
            <strong>@Model.Order.OrderNumber</strong>
        </div>
    </div>

    <div class="info-row">
        <div class="info-label">@L["Order:OrderDate"]:</div>
        <div class="info-value">
            @Model.Order.OrderDate.ToString("dd/MM/yyyy HH:mm:ss", CultureInfo.GetCultureInfo("vi-VN"))
        </div>
    </div>

    <div class="info-row">
        <div class="info-label">@L["Order:OrderStatus"]:</div>
        <div class="info-value">
            <span class="status-badge @GetStatusBadgeClass(Model.Order.OrderStatusText)">
                @L[$"Enum:OrderStatus.{Model.Order.OrderStatusText}"]
            </span>
        </div>
    </div>

    <div class="info-row">
        <div class="info-label">@L["Order:PaymentMethod"]:</div>
        <div class="info-value">
            <span class="badge bg-secondary">@Model.Order.PaymentMethod</span>
        </div>
    </div>

    <div class="info-row">
        <div class="info-label">@L["Order:PaymentStatus"]:</div>
        <div class="info-value">
            <span class="status-badge @GetPaymentStatusBadgeClass(Model.Order.PaymentStatusText)">
                @L[$"Enum:PaymentStatus.{Model.Order.PaymentStatusText}"]
            </span>
        </div>
    </div>
</div>

<!-- Customer Information - Using ABP Card -->
<abp-card class="mb-3">
    <abp-card-header>
        <abp-card-title>
            <i class="bi bi-person me-2"></i>
            @L["Order:CustomerInformation"]
        </abp-card-title>
    </abp-card-header>
    <abp-card-body>
        <abp-row>
            <abp-column size-md="_6">
                <div class="info-row">
                    <div class="info-label">@L["Order:CustomerName"]:</div>
                    <div class="info-value">@Model.Order.CustomerName</div>
                </div>
            </abp-column>
            <abp-column size-md="_6">
                <div class="info-row">
                    <div class="info-label">@L["Order:CustomerPhone"]:</div>
                    <div class="info-value">
                        <a href="tel:@Model.Order.CustomerPhone">@Model.Order.CustomerPhone</a>
                    </div>
                </div>
            </abp-column>
        </abp-row>
        <abp-row>
            <abp-column size="_12">
                <div class="info-row">
                    <div class="info-label">@L["Order:ShippingAddress"]:</div>
                    <div class="info-value">@Model.Order.ShippingAddress</div>
                </div>
            </abp-column>
        </abp-row>
    </abp-card-body>
</abp-card>

<!-- Order Items Table - Using ABP Table -->
<abp-card>
    <abp-card-header>
        <abp-card-title>
            <i class="bi bi-cart me-2"></i>
            @L["Order:OrderItems"]
        </abp-card-title>
    </abp-card-header>
    <abp-card-body>
        <abp-table hoverable-rows="true" responsive-sm="true">
            <thead>
                <tr>
                    <th>#</th>
                    <th>@L["Product:ProductName"]</th>
                    <th class="text-end">@L["Product:Price"]</th>
                    <th class="text-center">@L["Order:Quantity"]</th>
                    <th class="text-end">@L["Order:LineTotal"]</th>
                </tr>
            </thead>
            <tbody>
                @{
                    int index = 1;
                    foreach (var item in Model.Order.OrderItems)
                    {
                        <tr>
                            <td>@index</td>
                            <td>
                                <strong>@item.ProductName</strong>
                            </td>
                            <td class="text-end">
                                @item.Price.ToString("C0", CultureInfo.GetCultureInfo("vi-VN"))
                            </td>
                            <td class="text-center">
                                <span class="badge bg-info">@item.Quantity</span>
                            </td>
                            <td class="text-end">
                                <strong>@item.LineTotalAmount.ToString("C0", CultureInfo.GetCultureInfo("vi-VN"))</strong>
                            </td>
                        </tr>
                        index++;
                    }
                }
            </tbody>
            <tfoot>
                <tr class="table-active">
                    <td colspan="4" class="text-end">
                        <strong>@L["Order:Total"]:</strong>
                    </td>
                    <td class="text-end">
                        <h5 class="mb-0 text-primary">
                            @Model.Order.TotalAmount.ToString("C0", CultureInfo.GetCultureInfo("vi-VN"))
                        </h5>
                    </td>
                </tr>
            </tfoot>
        </abp-table>
    </abp-card-body>
</abp-card>

<!-- Timeline Section - Using Normal HTML with Bootstrap -->
<abp-card class="mt-3">
    <abp-card-header>
        <abp-card-title>
            <i class="bi bi-clock-history me-2"></i>
            @L["Order:OrderHistory"]
        </abp-card-title>
    </abp-card-header>
    <abp-card-body>
        @if (Model.OrderHistory != null && Model.OrderHistory.Any())
        {
            <div class="timeline">
                @foreach (var history in Model.OrderHistory)
                {
                    <div class="timeline-item">
                        <div class="timeline-marker @GetHistoryMarkerClass(history)"></div>
                        <div class="timeline-content">
                            <div class="d-flex justify-content-between align-items-start">
                                <div>
                                    <h6 class="mb-1">@history.ChangeDescription</h6>
                                    <p class="text-muted mb-1">
                                        <i class="bi bi-person me-1"></i>
                                        <strong>@history.ChangedBy</strong>
                                    </p>
                                    <p class="text-muted mb-1">
                                        <i class="bi bi-clock me-1"></i>
                                        @history.CreationTime.ToString("dd/MM/yyyy HH:mm:ss")
                                    </p>
                                </div>
                                <div class="text-end">
                                    @if (history.OldStatus != history.NewStatus)
                                    {
                                        <div class="mb-2">
                                            <small class="text-muted d-block">Order Status:</small>
                                            <span class="badge @GetStatusBadgeClass(history.OldStatus)">
                                                @L[$"Enum:OrderStatus.{history.OldStatus}"]
                                            </span>
                                            <i class="bi bi-arrow-right mx-1"></i>
                                            <span class="badge @GetStatusBadgeClass(history.NewStatus)">
                                                @L[$"Enum:OrderStatus.{history.NewStatus}"]
                                            </span>
                                        </div>
                                    }
                                    @if (history.OldPaymentStatus != history.NewPaymentStatus)
                                    {
                                        <div>
                                            <small class="text-muted d-block">Payment Status:</small>
                                            <span class="badge @GetPaymentStatusBadgeClass(history.OldPaymentStatus)">
                                                @L[$"Enum:PaymentStatus.{history.OldPaymentStatus}"]
                                            </span>
                                            <i class="bi bi-arrow-right mx-1"></i>
                                            <span class="badge @GetPaymentStatusBadgeClass(history.NewPaymentStatus)">
                                                @L[$"Enum:PaymentStatus.{history.NewPaymentStatus}"]
                                            </span>
                                        </div>
                                    }
                                </div>
                            </div>
                        </div>
                    </div>
                }
            </div>
        }
        else
        {
            <div class="alert alert-info">
                <i class="bi bi-info-circle me-2"></i>
                @L["Order:NoHistoryAvailable"]
            </div>
        }
    </abp-card-body>
</abp-card>

@functions {
    string GetStatusBadgeClass(string status)
    {
        return status switch
        {
            "Placed" => "bg-info text-white",
            "Pending" => "bg-light text-dark",
            "Confirmed" => "bg-primary text-white",
            "Processing" => "bg-warning text-dark",
            "Shipped" => "bg-success text-white",
            "Delivered" => "bg-dark text-white",
            "Cancelled" => "bg-danger text-white",
            _ => "bg-secondary text-white"
        };
    }
    string GetHistoryMarkerClass(OrderHistoryDto history)
    {
        // Different colors based on the change type
        if (history.NewStatus == "Delivered")
            return "bg-success";
        if (history.NewStatus == "Shipped")
            return "bg-primary";
        if (history.NewStatus == "Cancelled")
            return "bg-danger";
        if (history.NewPaymentStatus == "Paid")
            return "bg-success";
        if (history.NewPaymentStatus == "Failed")
            return "bg-danger";

        return "bg-info";
    }
    string GetPaymentStatusBadgeClass(string status)
    {
        return status switch
        {
            "Unpaid" => "bg-secondary text-white",
            "PendingOnDelivery" => "bg-info text-white",
            "Pending" => "bg-warning text-dark",
            "Paid" => "bg-success text-white",
            "Failed" => "bg-danger text-white",
            "Refunded" => "bg-dark text-white",
            "Cancelled" => "bg-secondary text-white",
            _ => "bg-dark text-white"
        };
    }
}