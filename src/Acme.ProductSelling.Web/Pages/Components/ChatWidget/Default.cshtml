@*
    For more information on enabling MVC for empty projects, visit https://go.microsoft.com/fwlink/?LinkID=397860
*@
@{
}
@model Acme.ProductSelling.Web.Pages.Components.ChatWidget.ChatWidgetViewModel

<button id="chatWidgetToggle" class="btn btn-primary rounded-circle shadow-lg"
        style="position: fixed; bottom: 20px; right: 20px; width: 60px; height: 60px; z-index: 1050;">
    <i class="fas fa-comment"></i>
</button>

<div id="chatWidget" class="card shadow-lg" style="display: none; position: fixed; bottom: 90px; right: 20px; width: 400px; height: 600px; z-index: 1050;">
    <!-- Same content as Chat/Index.cshtml but in a smaller widget -->
    <div class="card-header bg-primary text-white d-flex justify-content-between align-items-center">
        <h5 class="mb-0">💬 Chat</h5>
        <button class="btn btn-sm btn-link text-white" onclick="toggleChatWidget()">×</button>
    </div>

    <div class="card-body p-0">
        <div id="widget-chat-container" style="height: 450px; overflow-y: auto; padding: 15px; background: #f8f9fa;">
            <!-- Messages here -->
        </div>

        <div id="widget-suggestions-container" class="px-2 py-1 border-top">
            <!-- Suggestions -->
        </div>
    </div>

    <div class="card-footer bg-white p-2">
        <div class="input-group input-group-sm">
            <input type="text" id="widgetMessageInput" class="form-control" placeholder="Type..." onkeypress="handleWidgetKeyPress(event)">
            <button class="btn btn-primary btn-sm" onclick="sendWidgetMessage()">Send</button>
        </div>
    </div>

    @if (Model.IsAdmin)
    {
        <div class="card-footer bg-light p-2 border-top">
            <button class="btn btn-sm btn-secondary me-1" onclick="trainModel()">
                <i class="fas fa-brain"></i> Train
            </button>
            <button class="btn btn-sm btn-info" onclick="viewHistory()">
                <i class="fas fa-history"></i> History
            </button>
        </div>
    }
</div>

@section styles {
    <link href="~/css/chatbot/chatbotStyle.css" />
}

<script>
    let sessionId = generateSessionId();

    function generateSessionId() {
        return 'session_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9);
    }

    async function sendMessage(text) {
        const input = document.getElementById('messageInput');
        const message = text || input.value.trim();

        if (!message) return;

        // Add user message to UI
        addMessage(message, 'user');
        input.value = '';

        // Show typing indicator
        showTyping();

        try {
            const response = await fetch('/api/app/chatbot/message', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    message: message,
                    sessionId: sessionId,
                    isAdminChat: false
                })
            });

            const data = await response.json();

            // Remove typing indicator
            removeTyping();

            // Add bot response
            addMessage(data.message, 'bot');

            // Show suggestions
            showSuggestions(data.suggestions);

            // Show intent info (for admin mode)
            if (isAdminMode()) {
                console.log('Intent:', data.intent, 'Confidence:', data.confidence);
            }

        } catch (error) {
            removeTyping();
            addMessage('Sorry, something went wrong. Please try again.', 'bot');
        }
    }

    function addMessage(text, type) {
        const messagesDiv = document.getElementById('chatMessages');
        const messageDiv = document.createElement('div');
        messageDiv.className = `${type}-message`;
        messageDiv.innerHTML = `<div class="message-content">${text}</div>`;
        messagesDiv.appendChild(messageDiv);
        messagesDiv.scrollTop = messagesDiv.scrollHeight;
    }

    function showSuggestions(suggestions) {
        const suggestionsDiv = document.getElementById('chatSuggestions');
        suggestionsDiv.innerHTML = '';

        suggestions.forEach(suggestion => {
            const btn = document.createElement('button');
            btn.className = 'suggestion-btn';
            btn.textContent = suggestion;
            btn.onclick = () => sendMessage(suggestion);
            suggestionsDiv.appendChild(btn);
        });
    }

    function showTyping() {
        addMessage('Typing...', 'bot');
    }

    function removeTyping() {
        const messages = document.querySelectorAll('.bot-message');
        const lastMessage = messages[messages.length - 1];
        if (lastMessage && lastMessage.textContent.includes('Typing')) {
            lastMessage.remove();
        }
    }

    function handleKeyPress(event) {
        if (event.key === 'Enter') {
            sendMessage();
        }
    }

    // Admin functions
    async function trainModel() {
        try {
            await fetch('/api/app/chatbot/train', { method: 'POST' });
            alert('Model training started!');
        } catch (error) {
            alert('Error training model');
        }
    }

    function isAdminMode() {
        return document.querySelector('.chat-widget').classList.contains('admin-mode');
    }
</script>

<script>
    function toggleChatWidget() {
        const widget = document.getElementById('chatWidget');
        widget.style.display = widget.style.display === 'none' ? 'block' : 'none';
    }

    document.getElementById('chatWidgetToggle').onclick = toggleChatWidget;

    // Implement widget-specific message functions similar to Index.js
</script>